<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="getPaymentOptionsFlow" doc:id="13a56700-16a9-4e01-8e56-9da7426ffc71" >
		<logger level="INFO" doc:name="Start Logger" doc:id="388f3017-b7a1-4e2b-828f-100bb868aec0" message="&quot;Entering to inquire about the payment options available for the specific customer #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		 <ee:transform doc:name="Transform Message" doc:id="ded397cb-a6d3-42fe-b7ef-aa0361b7df7d">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="99fc31b4-dc0b-43d3-9dbb-8a4388b34c32" message="'Before HTTPS Request - Get Payment options ++ ProfileId: #[attributes.headers.'x-et-participant-user-id']'"/>
		<http:request method="GET" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="b4e945d5-1bb4-43ed-870b-73631437b530" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/transfers/options" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
			<http:query-params ><![CDATA[#[output application/java
---
{
	"serviceType" : attributes.queryParams.'deposit_type',
	"productCode" : attributes.headers.'x-et-product-code',
	"autodepositHandle" : attributes.queryParams.'deposit_handle'
}]]]></http:query-params>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="a9b8a418-4a03-4106-868b-a4ac7019fc2a" message="'After HTTPS Request - Get Payment options ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		<ee:transform doc:name="Transform Message" doc:id="6a7f248c-280e-4759-a2ec-7d47ffceff5e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::Runtime
output application/json
---
{
	payment_options: payload.transferOptions map ( transferOption , indexOfTransferOption ) -> {
		payment_type: 
		if(transferOption.transferType == "REGULAR")
		"REGULAR_PAYMENT"
		else
		"REALTIME_ACCOUNT_DEPOSIT_PAYMENT",
		customer_type: transferOption.customerType default "CORPORATE",
		customer_name: {
			legal_name: {
				business_name: {
					company_name: if(transferOption.customerName.legalName.businessName.companyName? and transferOption.customerName.legalName.businessName.companyName != null and transferOption.customerName.legalName.businessName.companyName != '') transferOption.customerName.legalName.businessName.companyName else null,
  trade_name:if(transferOption.customerName.legalName.businessName.tradeName? and transferOption.customerName.legalName.businessName.tradeName != null and transferOption.customerName.legalName.businessName.tradeName != '') transferOption.customerName.legalName.businessName.tradeName 
                     else null
				}
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="2188c9b9-4939-432a-918e-d0692a1f467d" message='"Payment options have been retrieved successfully"'/>
	</flow>
	<flow name="paymentsPreprocessFlow" doc:id="2c4a3035-9ec7-4071-a482-f2bced330976" >
		<logger level="INFO" doc:name="Start Logger" doc:id="df7ba344-0900-4331-89cd-0cd237158736" message="&quot;Entering Payment Transaction to initiate new e-Transfer #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		 <ee:transform doc:name="Transform Message" doc:id="10690859-6354-4766-923f-3dc74ae61021">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json skipNullOn="everywhere"
---
{
	amount: {
		amount: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].interbank_settlement_amount.amount,
		currencyCode: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].interbank_settlement_amount.currency
	},
	contactId: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].creditor.identification.organisation_identification.other[0].identification,
	financialSupplementaryInfo: {
		language: if ( payload.language == "EN" ) "ENGLISH" else "FRENCH",
		customerIpAddress: payload.fraud_supplementary_info.customer_ip_address
	},
	requestReferenceNumber: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].payment_identification.clearing_system_reference,
	customerAccount: {
		bankAccountIdentifier: {
			route: substringBefore(payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].debtor_account.identification.other.identification,"-"),
			transit: substringBefore(substringAfter(payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].debtor_account.identification.other.identification,"-"),"-"),
			accountNumber: substringAfterLast(payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].debtor_account.identification.other.identification,"-")
		},
		accountHolderName: payload.account_holder_name,
		fiAccountId: {
			memberNumber: rightPad("2000",5,(attributes.headers.'x-et-participant-user-id' last 8)),
			productNumber: substringBefore(payload.fi_account_id,"-"),
			branch: substringBefore(substringAfter(payload.fi_account_id,"-"),"-"),
			productType: substringAfter(substringAfter(substringBeforeLast(payload.fi_account_id,"-"),"-"),"-"),
			productCategory: substringAfterLast(payload.fi_account_id,"-")
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="a5c30245-b039-47eb-b28f-51c132283a77">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="485afddb-4e14-48d1-a554-42642285d22c" message="'Before HTTPS Request - Payment Preprocess ++  payload: #[payload]'"/>
		<http:request method="POST" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="7d965961-6f21-40a0-b79e-7152a33e4735" path="/profiles/{profileId}/transfers" config-ref="ETransfers_pAPI_HTTP_Request_configuration" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		<logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="7f2129b9-8a6b-4966-b025-4111f5501adb" message="'After HTTPS Request - Payment Preprocess ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		<ee:transform doc:name="Transform Message" doc:id="9dbf5bea-807e-4acf-85ad-81ce07ed660f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	fee: {
		amount: {
			amount: payload.fee.amount.amount,
			currencyCode: payload.fee.amount.currencyCode
		}
	},
	fi_to_fi_payment_status_report: {
		transaction_information_and_status: [{
			clearing_system_reference: payload.participantId
		}]
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="aeebd391-832a-4a0f-955a-89e57c0dd853" message='"Payment has been initiated successfully"'/>
	</flow>
	<flow name="paymentsCommitFlow" doc:id="2e9e6d7e-1d8f-4300-994e-bc91d3385348" >
		<logger level="INFO" doc:name="Start Logger" doc:id="fc98303d-d9b7-40e0-9f37-00bc96b2c491" message="&quot;Entering Payment Transaction to Submit new e-Transfer #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		<ee:transform doc:name="Transform Message" doc:id="03f7980a-5b48-48b7-8def-3f9d4d6ec0d9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
---
{
	expiryDate: (now() + |P30D| >> "America/Edmonton") as DateTime {format : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"},
	amount: {
		amount: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].interbank_settlement_amount.amount,
		currencyCode: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].interbank_settlement_amount.currency
	},
	productCode: payload.product_code,
	contactId: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].creditor.identification.organisation_identification.other[0].identification,
	financialSupplementaryInfo: {
		language: if ( payload.language == "EN" ) "ENGLISH" else "FR",
		customerIpAddress: payload.fraud_supplementary_info.customer_ip_address
	},
	//requestReferenceNumber: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].payment_identification.clearing_system_reference,
	customerAccount: {
		bankAccountIdentifier: {
			route: substringBefore(payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].debtor_account.identification.other.identification,"-"),
			transit: substringBefore(substringAfter(payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].debtor_account.identification.other.identification,"-"),"-"),
			accountNumber: substringAfterLast(payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].debtor_account.identification.other.identification,"-")
		},
		accountHolderName: payload.account_holder_name,
		fiAccountId: {
			memberNumber: rightPad("2000",5,(attributes.headers.'x-et-participant-user-id' last 8)),
			productNumber: substringBefore(payload.fi_account_id,"-"),
			branch: substringBefore(substringAfter(payload.fi_account_id,"-"),"-"),
			productType: substringAfter(substringAfter(substringBeforeLast(payload.fi_account_id,"-"),"-"),"-"),
			productCategory: substringAfterLast(payload.fi_account_id,"-")
		}
	},
	senderMemo: payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information.remittance_information.unstructured[0] joinBy " "
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="participantId" ><![CDATA[payload.fi_to_fi_customer_credit_transfer.credit_transfer_transaction_information[0].payment_identification.clearing_system_reference as Number]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		 <ee:transform doc:name="Transform Message" doc:id="2895dbbd-f51f-4677-85e6-cc5ab1cfb96a">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="bff08db9-91c3-478c-b6d8-ad736d5d9d47" message="'Before HTTPS Request - Payment Commit ++  payload: #[payload]'"/>
		<http:request method="POST" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="d83f1119-77cf-49c1-a1b5-96dd57ebf80a" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/transfers/{participantId}/commit" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"participantId" : vars.participantId,
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="6c9217b0-61d1-462c-a19d-b4c9ddfaece8" message="'After HTTPS Request - Payment Commit ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		<ee:transform doc:name="Transform Message" doc:id="f33622b0-d477-49e7-8c4c-931f04bcdbb8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	transferReferenceNumber: payload.transferId
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="2ac55f09-f9a9-4035-9123-02424048038b" message='"Payment has been submitted successfully"'/>
	</flow>
	<flow name="cancelPaymentsFlow" doc:id="c05846ad-ed9a-4b28-a2d1-dd8babd25cf4" >
		<logger level="INFO" doc:name="Start Logger" doc:id="d404b108-2f49-4efa-9aca-3a40379cb857" message="&quot;Entering the cancel eTransfer Payment that was already sent #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		 <ee:transform doc:name="Transform Message" doc:id="a3facc22-d339-45b2-85ab-fa0a284a1e53">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="77bfd9e6-37f8-4f42-87ff-e42459f9426e" message="'Before HTTPS Request - Cancel Payments ++  payload: #[payload]'"/>
		<http:request method="POST" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="8eb64441-36ca-4153-9284-25e388ffa73b" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/transfers/{transferId}/cancel" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"transferId" : attributes.uriParams.id,
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="17aa1b9b-f57d-4979-8225-e23d1dccabea" message="'After HTTPS Request - Cancel Payments ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		<logger level="INFO" doc:name="End Logger" doc:id="a0ea755c-8e1f-4146-9aaa-66aac6c231de" message='"Cancel request has been completed sucessfully"'/>
	</flow>
	<flow name="outgoingRequestToPayFlow" doc:id="bf7ab36c-d572-438e-8af2-28e992fcfc88" >
		<logger level="INFO" doc:name="Start Logger" doc:id="5b7ec50d-7f27-4852-8ae8-00c22b17c099" message="&quot;Entering the outgoing request to pay to an existing recipient #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		<ee:transform doc:name="Transform Message" doc:id="05306b38-9dc0-4efa-a485-4858688532ac" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="requestToPay" ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
				<ee:set-variable variableName="profileId" ><![CDATA[%dw 2.0
output application/json
---
attributes.headers.'x-et-participant-user-id']]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="08bdf0b3-aafe-40d9-8de9-396aee305d94" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
---
{
	amount: {
		amount: payload.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].amount.instructed_amount.amount,
		currencyCode: payload.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].amount.instructed_amount.currency
	},
	contactId: payload.creditor_payment_activation_request.payment_information[0].debtor.identification.organisation_identification.other[0].identification,
	financialSupplementaryInfo: {
		language: if ( payload.language == "EN" ) "ENGLISH" else "FRENCH",
		customerIpAddress: "0.0.0.0"
	},
	customerAccount: {
		bankAccountIdentifier: {
			route: substringBefore(payload.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].creditor_account.identification.other.identification, "-"),
			transit: substringBefore(substringAfter(payload.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].creditor_account.identification.other.identification,"-"),"-"),
			accountNumber: substringAfterLast(payload.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].creditor_account.identification.other.identification,"-")
		},
		accountHolderName: payload.account_holder_name,
		fiAccountId: {
			memberNumber: rightPad("2000",5,(vars.profileId last 8)),
			productNumber: substringBefore(payload.fi_account_id,"-"),
			branch: substringBefore(substringAfter(payload.fi_account_id,"-"),"-"),
			productType: substringAfter(substringAfter(substringBeforeLast(payload.fi_account_id,"-"),"-"),"-"),
			productCategory: substringAfterLast(payload.fi_account_id,"-")
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		 <ee:transform doc:name="Transform Message" doc:id="bc981ae1-27e5-426b-b91c-1ab183c59872">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="5f7fef18-1413-43c9-b630-77aed3bd1ba0" message="'Before HTTPS Request - Outgoing RequestToPay Preprocess ++  payload: #[payload]'"/>
		<http:request method="POST" doc:name="ETransfers_pAPI_HTTP_Request_configuration - RequestToPay" doc:id="2ea230ac-d1d6-43de-b83a-e5d56f7ee21e" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/requestsToPay" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
			<http:response-validator >
				<http:success-status-code-validator values="200..504" />
			</http:response-validator>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="11d3adec-9bb9-4819-9154-b5b70225b939" message="'After HTTPS Request - Outgoing RequestToPay Preprocess ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		<set-variable value="#[payload.participantId]" doc:name="set participantId" doc:id="1ef9d6fe-96a5-4776-96a1-47a5004dceb0" variableName="participantId"/>
		<choice doc:name="Choice" doc:id="ccba554e-695e-4c3a-a06c-0af214a8f160" >
			<when expression="#[attributes.statusCode == 201]">
				<ee:transform doc:name="Transform Message" doc:id="2eff8fce-74ac-40c4-9193-41e3f74c7e2e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
---
{
		expiryDate: (now() + |P30D| >> "America/Edmonton") as DateTime {format : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"},
	amount: {
		amount: vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].amount.instructed_amount.amount,
		currencyCode: vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].amount.instructed_amount.currency
	},
	productCode: "DOMESTIC",
	suppressResponderNotifications: vars.requestToPay.suppress_responder_notifications,
	contactId: vars.requestToPay.creditor_payment_activation_request.payment_information[0].debtor.identification.organisation_identification.other[0].identification,
	invoiceDetails: {
		dueDate: vars.requestToPay.creditor_payment_activation_request.payment_information[0].expiry_date,
		invoiceNumber: vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].enclosed_file[0].name
	},
	returnURL: vars.requestToPay.return_url,
	customerAccount: {
		bankAccountIdentifier: {
			route: substringBefore(vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].creditor_account.identification.other.identification,"-"),
			transit: substringBefore(substringAfter(vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].creditor_account.identification.other.identification,"-"),"-"),
			accountNumber: substringAfterLast(vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].creditor_account.identification.other.identification,"-")
		},
		accountHolderName: vars.requestToPay.account_holder_name,
		fiAccountId: {
			memberNumber: rightPad("2000",5,(vars.profileId last 8)),
			productNumber: substringBefore(vars.requestToPay.fi_account_id,"-"),
			branch: substringBefore(substringAfter(vars.requestToPay.fi_account_id,"-"),"-"),
			productType: substringAfter(substringAfter(substringBeforeLast(vars.requestToPay.fi_account_id,"-"),"-"),"-"),
			productCategory: substringAfterLast(vars.requestToPay.fi_account_id,"-")
		}
	},
	senderMemo: vars.requestToPay.creditor_payment_activation_request.payment_information[0].credit_transfer_transaction[0].remittance_information.unstructured joinBy " "
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				 <ee:transform doc:name="Transform Message" doc:id="dab1e4aa-881f-48a3-bd65-ace63bf920ff">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="831e766c-ea0e-4eb0-beb6-2d1b5d2852ef" message="'Before HTTPS Request - Outgoing RequestToPay Commit ++  payload: #[payload]'"/>
				<http:request method="POST" doc:name="ETransfers_pAPI_HTTP_Request_configuration - Commit" doc:id="ef4b2c39-8c3a-46f0-b72e-c1d2f542fd34" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/requestsToPay/{participantId}/commit" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
					<http:uri-params><![CDATA[#[output application/java
---
{
	"participantId" : vars.participantId,
	"profileId" : vars.profileId
}]]]></http:uri-params>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="95829866-1307-4557-94a7-c104678b4b7e" message="'After HTTPS Request - Outgoing RequestToPay Commit ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
				<ee:transform doc:name="Transform Message" doc:id="2f1e78f2-efdf-43ed-b9d8-2472a5ff6c6b" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	creditor_payment_activation_request_status_report: {
		original_payment_information_and_status: [{
			transaction_information_and_status: [{
				clearing_system_reference: payload.requestId
			}]
		}]
	},
	gateway_url: payload.gatewayUrl
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="End Logger" doc:id="d88a3dbb-fd8e-4745-9a4d-64d9417f0810" message='"Outgoing RequestToPay has been completed Successfully"' />
			</when>
			<otherwise >
				<set-variable value="#[attributes.statusCode default 500]" doc:name="Set httpStatus" doc:id="b6d4c847-c2eb-4ba4-88e8-f5e40b65944c" variableName="httpStatus"/>
				<ee:transform doc:name="Transform Message" doc:id="d3429c66-1989-44ec-bb6b-cb9651ed3b6a" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "code": payload.responseCode,
  "text": payload.message
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Default Logger" doc:id="473f0143-ab46-4a55-933c-3b460b124f6a" message='"Error received from Outgoing RequestToPay Preprocess"'/>
			</otherwise>
		</choice>
	</flow>
	<flow name="RetrieveincomingRequestToPay" doc:id="5f526044-4260-4c96-bbd5-72ae11eacbf1" >
		<logger level="INFO" doc:name="Start Logger" doc:id="06cc5186-e648-47bd-b435-165c543ffa8c" message="&quot;Entering to retrieve incoming request to pay for the customer #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		 <ee:transform doc:name="Transform Message" doc:id="bbff4328-c8a4-4d7e-91c7-026c7f6daddf">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="6cb5bd1c-df3f-4eba-a9d8-89421957f6c4" message="'Before HTTPS Request - Retrieve Incoming RequestToPay ++  ProfileId #[attributes.headers.'x-et-participant-user-id']'"/>
		<http:request method="GET" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="06ba5028-abd4-43df-86af-8aacd3775462" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/received/requestsToPay/{requestId}" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"profileId" : attributes.headers.'x-et-participant-user-id',
	"requestId" : attributes.uriParams.id
}]]]></http:uri-params>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="6bc8a14d-f1e7-48cb-b441-259c4d0b3b6e" message="'After HTTPS Request - Retrieve Incoming RequestToPay ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		<ee:transform doc:name="Transform Message" doc:id="51a2f286-8005-4988-a03a-8db6dfb943ae" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	creditor_payment_activation_request: {
		payment_information: [{
			expiry_date: payload.expiryDate,
			credit_transfer_transaction: [{
				amount: {
					amount: payload.amount.amount,
					currency: payload.amount.currencyCode
				},
				creditor_agent: {
					financial_institution_identification: {
						clearing_system_member_identification: {
							member_identification: payload.participantId
						}
					}
				},
				creditor: {
					name: if(payload.customerName.legalName.businessName.tradeName? and payload.customerName.legalName.businessName.tradeName != '' and payload.customerName.legalName.businessName.tradeName != null) (payload.customerName.legalName.businessName.tradeName) else if(payload.customerName.registrationName? and payload.customerName.registrationName != '' and payload.customerName.registrationName != null) (payload.customerName.registrationName) else if(payload.customerName.legalName.businessName.companyName? and payload.customerName.legalName.businessName.companyName != '' and payload.customerName.legalName.businessName.companyName != null ) (payload.customerName.legalName.businessName.companyName) else ""
				},
				remittance_information: {
					unstructured: payload.senderMemo
				},
				enclosed_file: [{
					name: payload.invoiceDetails.invoiceNumber
				}]
			}]
		}]
	},
	fraud_check_result: {
		score: payload.fraudCheckResult.score,
		reason: payload.fraudCheckResult.reason,
		action: payload.fraudCheckResult.action
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="132be923-d9ec-41fb-9941-71a9a34ac9b3" message='"Incoming RequestToPay has been completed Successfully"'/>
	</flow>
	<flow name="DeclineETransferFlow" doc:id="b5bc40a7-85a4-4970-84ac-8b1327caebfb" >
		<logger level="INFO" doc:name="Start Logger" doc:id="f818edaf-b547-4372-ac16-271235a68519" message="&quot;Entering to decline eTransfers flow  ++ ProfileId: #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		 <ee:transform doc:name="Transform Message" doc:id="d83ab8ed-eb87-4c53-98dc-97e0f275bd2a">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  declineReason: payload.decline_reason
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="61afb7af-c81b-4970-b6b7-482d7870f48d">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		<logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="f4f89247-86d9-49cd-935a-a57971944d63" message="'Before HTTPS Request - decline eTransfers ++  profileId:  #[attributes.headers.'x-et-participant-user-id']' and TransferId: #[attributes.uriParams.'id']"/>
		<http:request method="POST" doc:name="RequestETransfers_pAPI_HTTP_Request_configuration" doc:id="05934b12-95dd-4bd9-9156-6eea790cd8bf" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/received/transfers/{transferId}/decline" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"transferId" : attributes.uriParams.'id',
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		 <logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="d18b2cf9-ae28-4744-a916-bae62186049e" message="'After HTTPS Request - decline eTransfers ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
		 <logger level="INFO" doc:name="End Logger" doc:id="7fd79182-d584-4ec4-8e54-419460b633b0" message='"Flow has ended with the statusCode #[vars.httpStatus]"'/>
	</flow>
	<flow name="ReceiveIncomingTransferFlow" doc:id="e5a55188-f6bb-45ff-b9ae-a5c4c055d65d" >
		<logger level="INFO" doc:name="Start Logger" doc:id="c80c1979-58f1-40c8-879e-6d99407f994f" message="&quot;Entering to receive incoming eTransfers flow #[attributes.headers.'x-et-participant-user-id']&quot;"/>
		 <ee:transform doc:name="Transform Message" doc:id="e6679ef8-78d4-40c8-84b3-62eea8d593c5">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="411a2a13-372f-48f5-a77c-c473fd459260" message="'Before HTTPS Request - Receive Incoming Transfer ++  TransferId: #[attributes.uriParams.id]'"/> 
 		<http:request method="GET" doc:name="RequestETransfers_pAPI_HTTP_Request_configuration" doc:id="bb52ae2b-eb10-4bf2-9e66-4c7b3b14a2a0" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/received/transfers/{transferId}" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"transferId" : attributes.uriParams.id,
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		<logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="0f7a52b3-5afd-4d75-8967-495305f28410" message="'After HTTPS Request - Receive Incoming Transfer ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
 		<ee:transform doc:name="Transform Message" doc:id="f246ad04-3f97-4094-9b83-514aa4696f71" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	product_code: payload.productCode,
	payment_type: if ( payload.transferType == "DIRECT_DEPOSIT" ) "REALTIME_ACCOUNT_DEPOSIT_PAYMENT" else "REGULAR_PAYMENT",
	amount: {
		amount: payload.amount.amount,
		currency: payload.amount.currencyCode default "CAD"
	},
	expiry_date: payload.expiryDate,
	sender_memo: payload.senderMemo,
	payment_reference: payload.transferId,
	transfer_status: if(payload.transferStatus == "INITIATED") "INITIATED" else if(payload.transferStatus == "AVAILABLE") "AVAILABLE" else if(payload.transferStatus == "AUTHENTICATION_FAILURE") "AUTHENTICATION_FAILURE" else if(payload.transferStatus == "PROCESSING_DIRECT_DEPOSIT") "DIRECT_DEPOSIT_PENDING" else if(payload.transferStatus == "DIRECT_DEPOSIT_FAILED") "DIRECT_DEPOSIT_FAILED" else if(payload.transferStatus == "AUTHENTICATION_SUCCESSFUL") "AUTHENTICATION_SUCCESSFUL" else if(payload.transferStatus == "COMPLETED") "COMPLETED" else if(payload.transferStatus == "DECLINED") "DECLINED" else if(payload.transferStatus == "CANCELLED") "CANCELLED" else if(payload.transferStatus == "EXPIRED") "EXPIRED" else payload.transferStatus,
	originated_participant_id: payload.participantId,
	language: if ( payload.language == "ENGLISH" ) "EN" else "FR",
	sender_registration_name: payload.senderRegistrationName,
	authentication_required: true as Boolean,
	additional_remittance_info: "NOT_PROVIDED",
	security_question: payload.securityQuestion,
	hash_type: payload.hashType,
	hash_salt: payload.hashSalt
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="ad10e507-9770-4402-b5ee-9576d52e005a" message='"Flow has ended with the statusCode #[vars.httpStatus]"'/>
	</flow>
	<flow name="AuthenticateFlow" doc:id="f2381bd4-8471-487f-b1af-683666ebc40b">
	 <logger level="INFO" doc:name="Start Logger" doc:id="5af13c9f-9f9f-4db1-b477-fbfcb4f3f4ed" message="'Entering to authenticate flow ++ ProfileId: #[attributes.headers.'x-et-participant-user-id']'"/>
	 <ee:transform doc:name="Transform Message" doc:id="7f67186b-0c16-473e-b39f-4e16de842923" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	securityAnswer: payload.security_answer
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="63d70c44-ebe1-4213-9319-16587e5efdad">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
		<logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="10d2c3ac-16d5-48be-ba9e-d2cc0a66c037" message="'Before HTTPS Request - authenticate ++  payload: #[payload]'"/>
 	 <http:request method="POST" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="e59c2df6-e7e7-43a4-a446-e40758364a4d" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/received/transfers/{transferId}/authenticate" sendCorrelationId="ALWAYS">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"transferId" : attributes.uriParams.id,
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		<logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="1af87cd9-9b1b-4616-8e78-6629c8858d7e" message="'After HTTPS Request - authenticate ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/>
 	 <logger level="INFO" doc:name="End Logger" doc:id="3066de39-22ea-46a6-914c-1fa1233d3629" message='"Flow has ended with the statusCode #[vars.httpStatus]"'/>
	</flow>
	<flow name="GetOutgoingPaymentsFlow" doc:id="91120ce8-15f6-4553-b584-b1105e91cea0">
	 <logger level="INFO" doc:name="Start Logger" doc:id="51e81be6-df0f-441f-a840-37303f9a79c2" message="'Entering to Get Sent Payments flow ++ ProfileId: #[attributes.headers.'x-et-participant-user-id']'"/>
 <ee:transform doc:name="Transform Message" doc:id="f60c6e52-7cd4-4ac4-984d-af03465f922c">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logPayload" ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Values
---
((payload mask field("sin") with "******") mask field("dob") with "######") mask field("password") with "xxxxxx"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
 <logger level="DEBUG" doc:name="Before_HTTPS_Request_Logger" doc:id="f37276c9-9698-44ca-8ea8-097bc6c6b0fa" message="'Before HTTPS Request - Get Sent Payments ++  profileId: #[attributes.headers.'x-et-participant-user-id']'"/>
 <http:request method="GET" doc:name="ETransfers_pAPI_HTTP_Request_configuration" doc:id="a61d5995-7d59-4aec-9fd1-f5aa7e202cf5" config-ref="ETransfers_pAPI_HTTP_Request_configuration" path="/profiles/{profileId}/transfers/{transferId}" sendCorrelationId="ALWAYS" responseTimeout="${api.response.timeout}">
			<http:headers ><![CDATA[#[output application/java
---
{
	"X-Correlation-Id" : vars.correlationId
}]]]></http:headers>
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"transferId" : attributes.uriParams.id,
	"profileId" : attributes.headers.'x-et-participant-user-id'
}]]]></http:uri-params>
		</http:request>
		<logger level="DEBUG" doc:name="After_HTTPS_Request_Logger" doc:id="5ab7a859-b8c2-441e-b1fc-9530679628ef" message="'After HTTPS Request - Get Sent Payments ++ statusCode: #[attributes.statusCode] and payload: #[payload]'"/> 
 <ee:transform doc:name="Transform Message" doc:id="3b6a7c98-4da0-478a-a4c9-67c0349f42f9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	payment_reference: payload.transferId,
	product_code: payload.productCode,
	payment_type: if ( payload.transferType == "REGULAR" ) "REGULAR_PAYMENT" 
	else if( payload.transferType == "FULFILL_MONEY_REQUEST") "FULFILL_REQUEST_FOR_PAYMENT"
	else if ( payload.transferType == "DIRECT_DEPOSIT" ) "ACCOUNT_ALIAS_PAYMENT"
	 else payload.transferType,
	request_date: payload.requestDate,
	amount: {
		amount: payload.amount.amount,
		currency: payload.amount.currencyCode default "CAD"
	},
	receiving_channel_indicator: if ( payload.receivingChannelIndicator == "CUSTOMER_ONLINE_INITIATED" ) "ONLINE"
	else if ( payload.receivingChannelIndicator == "CUSTOMER_MOBILE_INITIATED" ) "MOBILE"
	else if ( payload.receivingChannelIndicator == "PARTICIPANT_PAYMENT_SYSTEM_INITIATED_BULK_FILE_TRANSACTION" ) "PARTICIPANT_BULK_PAYMENT"
	else if ( payload.receivingChannelIndicator == "PARTICIPANT_PAYMENT_SYSTEM_INITIATED_TRANSACTION" ) "PARTICIPANT_ETRANSFER_SYSTEM"
	else if ( payload.receivingChannelIndicator == "PARTICIPANT_FRAUD_DETECTION_SYSTEM_INITITATED_TRANSACTION" ) "PARTICIPANT_FRAUD_SYSTEM"
	else if ( payload.receivingChannelIndicator == "ETRANSFER_SYSTEM_INITIATED_TRANSACTION" ) "ETRANSFER_SYSTEM"
	else if ( payload.receivingChannelIndicator == "ETRANSFER_FRAUD_DETECTION_SYSTEM_INITIATED_TRANSACTION" ) "ETRANSFER_FRAUD"
	else if ( payload.receivingChannelIndicator == "EXTERNAL_API_INITIATED_TRANSACTION" ) "EXTERNAL_APPS"
	else payload.receivingChannelIndicator,
	payment_status: if ( payload.transferStatus == "PROCESSING_DIRECT_DEPOSIT" or "IN_SETTLEMENT" or "DEPOSIT_MECHANISM_SPECIFIED" or "DEPOSIT_MECHANISM_CORRECTED") "DIRECT_DEPOSIT_PENDING"
	else if(payload.transferStatus == "INITIATED") "INITIATED"
	else if(payload.transferStatus == "AVAILABLE") "AVAILABLE"
	else if(payload.transferStatus == "AUTHENTICATION_FAILURE") "AUTHENTICATION_FAILURE"
	else if(payload.transferStatus == "DECLINED" or "DEPOSIT_MECHANISM_DECLINED") "DECLINED"
	else if(payload.transferStatus == "EXPIRED") "EXPIRED"
	else if(payload.transferStatus == "DIRECT_DEPOSIT_FAILED") "DIRECT_DEPOSIT_FAILED"
	else if(payload.transferStatus == "CANCELLED") "CANCELLED"
	else if(payload.transferStatus == "COMPLETED" or "OFFLINE_COMPLETED") "COMPLETED"
	else if(payload.transferStatus == "DEPOSIT_MECHANISM_FAILED") "REALTIME_DEPOSIT_FAILED"
	 else payload.transferStatus,
	expiry_date: payload.expiryDate,
	participant_reference: payload.participantId,
	sender_memo: payload.senderMemo,
	originating_channel_indicator: if ( payload.originatingChannelIndicator == "CUSTOMER_ONLINE_INITIATED" ) "ONLINE"
	else if ( payload.originatingChannelIndicator == "CUSTOMER_MOBILE_INITIATED" ) "MOBILE"
	else if ( payload.originatingChannelIndicator == "PARTICIPANT_PAYMENT_SYSTEM_INITIATED_BULK_FILE_TRANSACTION" ) "PARTICIPANT_BULK_PAYMENT"
	else if ( payload.originatingChannelIndicator == "PARTICIPANT_PAYMENT_SYSTEM_INITIATED_TRANSACTION" ) "PARTICIPANT_ETRANSFER_SYSTEM"
	else if ( payload.originatingChannelIndicator == "PARTICIPANT_FRAUD_DETECTION_SYSTEM_INITITATED_TRANSACTION" ) "PARTICIPANT_FRAUD_SYSTEM"
	else if ( payload.originatingChannelIndicator == "ETRANSFER_SYSTEM_INITIATED_TRANSACTION" ) "ETRANSFER_SYSTEM"
	else if ( payload.originatingChannelIndicator == "ETRANSFER_FRAUD_DETECTION_SYSTEM_INITIATED_TRANSACTION" ) "ETRANSFER_FRAUD"
	else if ( payload.originatingChannelIndicator == "EXTERNAL_API_INITIATED_TRANSACTION" ) "EXTERNAL_APPS"
	else if(payload.originatingChannelIndicator == "ABM" or "POS" or "PIN") "INTERAC_PBB"
	else payload.originatingChannelIndicator,
	request_for_payment_reference: payload.requestReferenceNumber,
	notification_status: if ( payload.notificationStatus == "PENDING" or "UNKNOWN" ) "PENDING" else payload.notificationStatus,
	contact_outgoing_details: {
		contact_id: payload.contactOutgoingDetails.contactId,
		alias_name: payload.contactOutgoingDetails.contactName.aliasName,
		notification_preference: payload.contactOutgoingDetails.notificationPreferences map ( notificationPreference , indexOfNotificationPreference ) -> {
			"type": notificationPreference.notificationHandleType,
			active: notificationPreference.active
		}
	},
	account_deposit_data: {
		"type": "CANADIAN",
		account: ((payload.customerAccount.bankAccountIdentifier.routedefault "") ++"-" ++ payload.customerAccount.bankAccountIdentifier.transit) ++"-" ++ payload.customerAccount.bankAccountIdentifier.accountNumber
	},
	customer_account: {
		fi_account_id: ((((payload.customerAccount.fiAccountId.memberNumberdefault "") ++"-" ++ payload.customerAccount.fiAccountId.productNumber) ++"-" ++ payload.customerAccount.fiAccountId.branch) ++"-" ++ payload.customerAccount.fiAccountId.productType) ++"-" ++ payload.customerAccount.fiAccountId.productCategory,
		account_holder_name: payload.customerAccount.accountHolderName,
		bank_account_identifier: {
			"type": "CANADIAN",
			account: ((payload.customerAccount.bankAccountIdentifier.routedefault "") ++"-" ++ payload.customerAccount.bankAccountIdentifier.transit) ++"-" ++ payload.customerAccount.bankAccountIdentifier.accountNumber
		}
	},
	additional_remittance_info: "NOT_PROVIDED"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="End Logger" doc:id="43b10232-d256-4dc2-bde6-89c18d6e29d3" message='"Flow has ended with the statusCode #[vars.httpStatus]"'/>
	</flow>
</mule>
